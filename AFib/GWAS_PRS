R script for PRS provided by Dr Tim Hearn. 


### GWAS PRS ###

# Load the Weights File without predefined headers and assign column names manually
variant_weights <- read.table("GWAS_OR.tsv", header = FALSE, stringsAsFactors = FALSE)
colnames(variant_weights) <- c("ID", "Weight")

# Calculate Individual PRS
parse_vcf_info_with_prs <- function(file_path, weights) {
  vcf_data <- read.table(file_path, header = FALSE, stringsAsFactors = FALSE)
  colnames(vcf_data) <- c("Sample", "Chrom", "Pos", "ID", "Ref", "Alt", "Qual", "Filter", "GT", "GQ")

  # Split GT field to count alleles
  vcf_data$AlleleCount <- sapply(strsplit(as.character(vcf_data$GT), "/"), function(gt) sum(as.numeric(gt)))
  
  # Convert AlleleCount to numeric and handle non-numeric values
  vcf_data$AlleleCount <- as.numeric(vcf_data$AlleleCount)
  if (any(is.na(vcf_data$AlleleCount))) {
    warning("NA values introduced by coercion in AlleleCount")
  }

  # Join with weights to calculate PRS
  vcf_data <- merge(vcf_data, weights, by = "ID")
  
  # Convert Weight to numeric and handle non-numeric values
  vcf_data$Weight <- as.numeric(vcf_data$Weight)
  if (any(is.nu(vcf_data$Weight))) {
    warning("NA values introduced by coercion in Weight")
  }
  
  # Replace NA values with 0 
  vcf_data$AlleleCount[is.na(vcf_data$AlleleCount)] <- 0
  vcf_data$Weight[is.na(vcf_data$Weight)] <- 0
  
# Load the Weights File without predefined headers and assign column names manually
variant_weights <- read.table("GWAS_OR.tsv", header = FALSE, stringsAsFactors = FALSE)
colnames(variant_weights) <- c("ID", "Weight")

# Ensure that the Weight column is numeric
variant_weights$Weight <- as.numeric(variant_weights$Weight)

# Check for NA values introduced by coercion (non-numeric values in the original data)
if (any(is.na(variant_weights$Weight))) {
  warning("Some non-numeric values were found in the Weight column and converted to NA.")
  variant_weights <- variant_weights[!is.na(variant_weights$Weight), ]
}

# Calculate the maximum possible PRS
max_prs <- sum(variant_weights$Weight * 2, na.rm = TRUE)

# Print the maximum possible PRS
cat("The maximum possible PRS is:", max_prs, "\n")


# Calculate PRS for cases and controls
cases_with_prs <- parse_vcf_info_with_prs("cases.txt", variant_weights)
controls_with_prs <- parse_vcf_info_with_prs("control.txt", variant_weights)

# Aggregate PRS by sample
aggregate_prs <- function(data) {
  aggregate(data$PRS, by = list(Sample = data$Sample), FUN = sum)
}

cases_prs_summary <- aggregate_prs(cases_with_prs)
controls_prs_summary <- aggregate_prs(controls_with_prs)

# Write aggregated PRS to CSV
write.csv(cases_prs_summary, "cases_prs_summary.csv", row.names = FALSE)
write.csv(controls_prs_summary, "controls_prs_summary.csv", row.names = FALSE)

# Calculate mean and standard deviation for cases and controls
summary_statistics <- function(prs_data) {
  mean_prs <- mean(prs_data$x)
  sd_prs <- sd(prs_data$x)
  return(list(mean = mean_prs, sd = sd_prs))
}

cases_stats <- summary_statistics(cases_prs_summary)
controls_stats <- summary_statistics(controls_prs_summary)

# Print summary statistics
cat("Cases PRS Mean and SD:", cases_stats$mean, cases_stats$sd, "\n")
cat("Controls PRS Mean and SD:", controls_stats$mean, controls_stats$sd, "\n")

# Prepare summary statistics for output
summary_stats_df <- data.frame(
  Group = c("Cases", "Controls"),
  Mean_PRS = c(cases_stats$mean, controls_stats$mean),
  SD_PRS = c(cases_stats$sd, controls_stats$sd)
)

# Write summary statistics to CSV
write.csv(summary_stats_df, "summary_statistics_prs.csv", row.names = FALSE)
